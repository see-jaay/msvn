<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script>
<![CDATA[
/* bezier-spline.js
 *
 * computes cubic bezier coefficients to generate a smooth
 * line through specified points. couples with SVG graphics 
 * for interactive processing.
 *
 * For more info see:
 * http://www.particleincell.com/2012/bezier-splines/ 
 *
 * Lubos Brieda, Particle In Cell Consulting LLC, 2012
 * you may freely use this algorithm in your codes however where feasible
 * please include a link/reference to the source article
 */ 

var svg=document.documentElement /*svg object*/
var S=new Array() /*splines*/
var V=new Array() /*vertices*/
var Thorns=new Array() /*thorns*/
var IPs= new Array()
var CPs= new Array()
var C 	/*current object*/
var x0,y0	/*svg offset*/
var vine

/*saves elements as global variables*/
function init(v)
{
	vine = v;
	vine.svg = svg;

	/*S[0] = createPath("blue");
	S[1] = createPath("red");
	S[2] = createPath("green");
	S[3] = createPath("brown");

	create control points
	V[0] = createKnot(60,60);
	V[1] = createKnot(220,300);
	V[2] = createKnot(420,300);
	V[3] = createKnot(700,240);*/


	for(var i = 0; i < vine.nodeCount; i++)
	{
		S[i] = createPath(vine.color);
		if(i == 0)
			V[i] = createKnot(vine.head.pos.x, vine.head.pos.y);
		else
			V[i] = createKnot(vine.nodes[i-1].pos.x, vine.nodes[i-1].pos.y);
	}
	
	updateSplines();
	createThorns();

	vine.isInit = true;

	vine.element.css('opacity', 1);
}
/*creates and adds an SVG circle to represent knots*/
function createKnot(x,y)
{
	var C=document.createElementNS("http://www.w3.org/2000/svg","circle")
	//C.setAttributeNS(null,"r",0)
	C.setAttributeNS(null,"cx",x)
	C.setAttributeNS(null,"cy",y)
	//C.setAttributeNS(null,"fill",vine.color)
	//C.setAttributeNS(null,"stroke","black")
	//C.setAttributeNS(null,"stroke-width","0")
	//C.setAttributeNS(null,"onmousedown","startMove(evt)")
	svg.appendChild(C)
	return C
}

function randomFlt(min, max)
{
	return Math.random()*(max-min+1)+min;
}

function randomInt(min, max)
{
	return Math.floor(Math.random()*(max-min+1)+min);
}

function Angle(p1, p2, radians = 0) {
     return Math.atan2(p2.y- p1.y, p2.x - p1.x) * 180 / Math.PI;
}

function createThorns()
{
		
	var i = 0;
	var flip = 1;
	while(i < IPs.length-1)
	{

		var prev = i-1;
		var next = i+1;
		var thisPoint = i;
		//if(randomInt(0,10) > 5)
		//{
			if(flip == 1)
				flip = -1;
			else
				flip = 1;
		//}
		//else 
		//	flip = randomInt(-1,1);

		<!-- flip *= randomFlt(.5,1); -->

		var scale = vine.strokeWidth;

		var g = document.createElementNS("http://www.w3.org/2000/svg","g");
		var T=document.createElementNS("http://www.w3.org/2000/svg","path");
		T.setAttributeNS(null,"d","M14.43,48.61a41,41,0,0,0,7.29,6.76C36,65.61,55.32,64.9,72.61,61.69c4.56-.85,15-3.86,19-.25,3.48,3.13,3.32,11.88,1.58,15.68-2.14,4.65-6,8.27-9.66,11.79-18.75,17.81-37.11,36.24-52.15,57.28S4.09,191.1,0,216.63C-.19,144.42.19,72.21,0,0,.34,10.27,1.28,20.64,4.49,30.4A54.34,54.34,0,0,0,14.43,48.61Z");
		T.setAttributeNS(null,"fill",vine.color);

		svg.appendChild(g);
		g.appendChild(T);


		Thorns.push({pp: prev, np: next, p:thisPoint, svg: T, g:g, f:flip});
		//console.log(T);

		i += randomInt(1, vine.strokeWidth);

	}
}


function updateThorns()
{
	for(var i = 0; i < Thorns.length; i++)
	{
		var t = Thorns[i];
		var p = IPs[t.p];
		var pp = IPs[t.pp];
		var np = IPs[t.np];
		var scale = vine.strokeWidth/50;
		var flp = t.f;
		var a;

		if(pp == undefined)
		{
			a = Angle(p, np);
		}
		else if(np == "undefined")
		{
			a = Angle(pp, p);
		}
		else
		{
			a = Angle(pp, np);
		}

		t.g.setAttributeNS(null, "transform", "translate("+ (p.x + ((vine.strokeWidth/3) * flp)) +" "+ p.y +") scale("+(scale*flp)+" "+scale+") rotate("+((a-90) * flp)+")");


		t.svg.setAttributeNS(null, "fill", vine.color);
	}
}

/*creates and adds an SVG path without defining the nodes*/
function createPath(color,width)
{		
	/*width = (typeof width == 'undefined' ? "4" : width);*/
	width = vine.strokeWidth;
	var P=document.createElementNS("http://www.w3.org/2000/svg","path")
	P.setAttributeNS(null,"fill","none")
	P.setAttributeNS(null,"stroke",color)
	P.setAttributeNS(null,"stroke-width",width)
	svg.appendChild(P)
	return P
}

/*from http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html*/
function startMove(evt)
{
	/*SVG positions are relative to the element but mouse 
	  positions are relative to the window, get offset*/
	x0 = getOffset(svg).left; 
	y0 = getOffset(svg).top; 
	
	C=evt.target
	svg.setAttribute("onmousemove","move(evt)")
	svg.setAttribute("onmouseup","drop()")	
}

/*called on mouse move, updates dragged circle and recomputes splines*/
function move(evt,x,y)
{
	x = evt.clientX-x0;
	y = evt.clientY-y0;
	
	/*move the current handle*/
	C.setAttributeNS(null,"cx",x)
	C.setAttributeNS(null,"cy",y)
	updateSplines();
}

/*called on mouse up event*/
function drop()
{
	svg  = document.getElementsByTagName('svg')[0];
	svg.setAttributeNS(null, "onmousemove",null)
}

function BezierInterpolation(t,a,b,c,d) {
    var t2 = t * t, t3 = t2 * t;

    return a + (-a * 3 + t * (3 * a - a * t)) * t
    + (3 * b + t * (-6 * b + b * 3 * t)) * t
    + (c * 3 - c * 3 * t) * t2
    + d * t3;
}

function InterpolatePoints(s, c1,c2,e,i)
{
	for (var t = 0.0; t <= 1.0; t += vine.strokeWidth * .025) {
    	// var point = {BezierInterpolation(t, s.x, c1.x, c2.x, e.x), BezierInterpolation(t, s.y, c1.y, c2.y, e.y), 0);
		IPs.push({x:BezierInterpolation(t, s.x, c1.x, c2.x, e.x), y:BezierInterpolation(t, s.y, c1.y, c2.y, e.y), z:0});
	}   

	 console.log(IPs.length);

}

function AddCtrlPts(p1x, p1y, p2x, p2y, i)
{
		// CPs.push({f:{x:p1x, y:p1y}, s: {x:p2x,y:p2y}})
		var c1 = {x:p1x, y:p1y}, c2 = {x:p2x,y:p2y};

		var s, e;

		if(i == 0)
		{
			s = vine.head.pos; 
			e = vine.nodes[i].pos;
		}
		else
		{
			s = vine.nodes[i-1].pos; 
			e = vine.nodes[i].pos;
		}

		InterpolatePoints(s,c1,c2,e,i);

}

	
/*computes spline control points*/
function updateSplines()
{	




/*grab (x,y) coordinates of the control points*/
	x=new Array();
	y=new Array();
	for (i=0;i<V.length;i++)
	{
		if(i == 0)
		{
			V[i].setAttributeNS(null,"cx",vine.head.pos.x);
			V[i].setAttributeNS(null,"cy",vine.head.pos.y);
		}
		else
		{
			V[i].setAttributeNS(null,"cx",vine.nodes[i-1].pos.x);
			V[i].setAttributeNS(null,"cy",vine.nodes[i-1].pos.y);
		}

		/*use parseInt to convert string to int Original*/
		x[i]=parseInt(V[i].getAttributeNS(null,"cx"));
		y[i]=parseInt(V[i].getAttributeNS(null,"cy"));

	}
	
	/*computes control points p1 and p2 for x and y direction*/
	px = computeControlPoints(x);
	py = computeControlPoints(y);


	//console.log(px,py);

	<!-- console.log(IPs); -->

	IPs = new Array();
	CPs = new Array();

	<!-- vine.interpoints = new Array(); -->
	<!-- vine.ctrlPts = new Array(); -->

	/*updates path settings, the browser will draw the new spline*/
	for (i=0;i<V.length-1;i++)
	{
		S[i].setAttributeNS(null,"d",
			path(x[i],y[i],px.p1[i],py.p1[i],px.p2[i],py.p2[i],x[i+1],y[i+1]));
		AddCtrlPts(px.p1[i],py.p1[i],px.p2[i],py.p2[i], i);

		S[i].setAttributeNS(null, "stroke", vine.color);
	}

	updateThorns();

}

/*creates formated path string for SVG cubic path element*/
function path(x1,y1,px1,py1,px2,py2,x2,y2)
{
	return "M "+x1+" "+y1+" C "+px1+" "+py1+" "+px2+" "+py2+" "+x2+" "+y2;
}

/*computes control points given knots K, this is the brain of the operation*/
function computeControlPoints(K)
{
	p1=new Array();
	p2=new Array();
	n = K.length-1;
	
	/*rhs vector*/
	a=new Array();
	b=new Array();
	c=new Array();
	r=new Array();
	
	/*left most segment*/
	a[0]=0;
	b[0]=2;
	c[0]=1;
	r[0] = K[0]+2*K[1];
	
	/*internal segments*/
	for (i = 1; i < n - 1; i++)
	{
		a[i]=1;
		b[i]=4;
		c[i]=1;
		r[i] = 4 * K[i] + 2 * K[i+1];
	}
			
	/*right segment*/
	a[n-1]=2;
	b[n-1]=7;
	c[n-1]=0;
	r[n-1] = 8*K[n-1]+K[n];
	
	/*solves Ax=b with the Thomas algorithm (from Wikipedia)*/
	for (i = 1; i < n; i++)
	{
		m = a[i]/b[i-1];
		b[i] = b[i] - m * c[i - 1];
		r[i] = r[i] - m*r[i-1];
	}
 
	p1[n-1] = r[n-1]/b[n-1];
	for (i = n - 2; i >= 0; --i)
		p1[i] = (r[i] - c[i] * p1[i+1]) / b[i];
		
	/*we have p1, now compute p2*/
	for (i=0;i<n-1;i++)
		p2[i]=2*K[i+1]-p1[i+1];
	
	p2[n-1]=0.5*(K[n]+p1[n-1]);
/*
	vine.ClearIPs();
	for(i = 0; i < p1.length; i++)
	{
		var pt1,pt2 = p1,pt3 = p2,pt4;
		if(i == 0)
		{
		 	pt1 = vine.head.pos;
		 	pt4 = vine.nodes[i].pos;
		}
		else
		{
			pt1 = vine.nodes[i-1].pos;
		 	pt4 = vine.nodes[i].pos;
		}

	    for (var t = 0.0; t <= 1.00001; t += 0.1) {
	        var point = {x:bezierInterpolation(t, pt1.x, pt2[0], pt3[0], pt4.x), y:bezierInterpolation(t, pt1.y, pt2[1], pt3[1], pt4.y),z:0};

			//console.log(point);
			vine.AddInterpoint(point);
	    }   
	}
	*/

	return {p1:p1, p2:p2};
}


function bezierInterpolation(t, a, b, c, d) {
    var t2 = t * t;
    var t3 = t2 * t;
    return a + (-a * 3 + t * (3 * a - a * t)) * t
    + (3 * b + t * (-6 * b + b * 3 * t)) * t
    + (c * 3 - c * 3 * t) * t2
    + d * t3;
}

/*code from http://stackoverflow.com/questions/442404/dynamically-retrieve-html-element-x-y-position-with-javascript*/
function getOffset( el ) 
{
    var _x = 0;
    var _y = 0;
    while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
        _x += el.offsetLeft - el.scrollLeft;
        _y += el.offsetTop - el.scrollTop;
        el = el.offsetParent;
    }
    return { top: _y, left: _x };
}
]]>
</script>

</svg>